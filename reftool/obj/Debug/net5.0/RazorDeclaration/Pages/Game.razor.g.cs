// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace reftool_blazor_server.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using reftool_blazor_server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using reftool_blazor_server.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\C5315422\source\repos\thesis\reftool\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using reftool_blazor_server.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using reftool_blazor_server.Data.Game;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using Append.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using DataAccessLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using DataAccessLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using System.Runtime;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
using reftool_blazor_server.Pages;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/game")]
    public partial class Game : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 292 "C:\Users\C5315422\source\repos\thesis\reftool\Pages\Game.razor"
 
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    Team t1;
    Team t2;
    System.Collections.Stack methods;
    Alert myAlert;
    TeamModel homeTeam, awayTeam;
    int homeTeamId, awayTeamId;
    reftool_blazor_server.Data.Game.Game g;
    MemoryStream s;
    List<TeamModel> availableTeams;
    bool sameTeams;


    protected override async Task OnInitializedAsync()
    {
        methods = new System.Collections.Stack();
        sameTeams = false;
        availableTeams = await teamdb.GetTeams();
        if (t1 != null && t2 != null)
            g = new reftool_blazor_server.Data.Game.Game(t1, t2);

        //s = reftool_blazor_server.Data.ExportToPdf.GenerateReport(g);
    }


    Task OnClicked()
    {
        modalRef.Hide();

        return Task.CompletedTask;
    }

    Modal modalRef;
    [Inject] Append.Blazor.Notifications.INotificationService NotificationService { get; set; }


    async Task ShowWarningNotificationWithBool(Action<bool> myMethod, Player item, bool value)
    {
        if (!item.active)
        {
            if (NotificationService.PermissionStatus != PermissionType.Granted)
                await NotificationService.RequestPermissionAsync();
            var options = new Append.Blazor.Notifications.NotificationOptions
            {
                Body = "This player is not on the floor",
                Renotify = true, // By default a notification is not overwritten, so there can only be one.
                Silent = true,
                TimeOut = 2
            };

            await NotificationService.CreateAsync("Warning", options);
        }
        else
        {
            var revertMethod = typeof(RevertStats).GetMethod(myMethod.Method.Name);
            methods.Push(new List<object>(new object[] { revertMethod, item, value }));
            myMethod(value);

            if (myMethod.Method.Name == "Foul")
            {
                if (g.clock.IsButtonPressed())
                    ToggleTimer();
                if (item.Stats.Fouls == 5)
                {
                    item.active = false;
                    await ShowWarningNotification("Player has fouled out!");
                    if (item.PlayerTeam.Stats.OverLimit())
                        await ShowWarningNotification(String.Format("{0} are over the foul limit, free throws should be awarded", item.PlayerTeam.Name));

                }

            }
        }

    }

    void undoLastAction()
    {
        List<object> action = (List<object>)methods.Pop();
        System.Reflection.MethodInfo methodInfo = (System.Reflection.MethodInfo)action[0];
        Player p = (Player)action[1];
        bool value = (bool)action[2];

        methodInfo.Invoke(null, new object[] { p.Stats, value });
    }

    async Task ShowWarningNotificationWithoutBool(Action myMethod, Player item)
    {
        if (!item.active)
        {
            if (NotificationService.PermissionStatus != PermissionType.Granted)
                await NotificationService.RequestPermissionAsync();
            var options = new Append.Blazor.Notifications.NotificationOptions
            {
                Body = "This player is not on the floor",
                Renotify = true // By default a notification is not overwritten, so there can only be one.
            };

            await NotificationService.CreateAsync("Warning", options);
        }
        else
        {
            myMethod();
        }

    }

    async Task ShowWarningNotification(string message)
    {
        if (NotificationService.PermissionStatus != PermissionType.Granted)
            await NotificationService.RequestPermissionAsync();
        var options = new Append.Blazor.Notifications.NotificationOptions
        {
            Body = message,
            Renotify = true // By default a notification is not overwritten, so there can only be one.
        };

        await NotificationService.CreateAsync("Warning", options);
    }


    public static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }


    //static Team t1 = generate();
    // static Team t2 = generate2();


    private static System.Timers.Timer timer;


    public async void ToggleTimer()
    {
        if (!g.RightAmountOfPlayers())
        {
            await ShowWarningNotification("The number of players on the court is not correct!");
            return;
        }


        if (!g.clock.IsButtonPressed())
        {
            timer = new System.Timers.Timer(100);
            timer.Elapsed += CountDownTimer;
            timer.Enabled = true;
            g.clock.SetButton(true);
        }
        else
        {
            timer.Enabled = false;
            g.clock.SetButton(false);
        }

    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {

        if (g.clock.GetGameTime() > 0)
        {
            g.clock.DecTime(100);
            g.IncActPlayersTime(100);
        }
        else
        {
            ToggleTimer();
            g.incQuarter();
            g.clock.ResetClock(g.IsOvertime());
        }

        InvokeAsync(StateHasChanged);
    }

    public void iterate(int scale)
    {
        foreach (Player p in t1.Players)
        {
            if (p.active)
                p.Stats.IncTim(scale);
        }
    }

    public async void assignTeams()
    {
        if (homeTeamId == awayTeamId)
        {
            sameTeams = true;
            return;
        }
        else
            sameTeams = false;

        List<PlayerModel> homePlayers = new List<PlayerModel>();
        homePlayers = await playerdb.GetPlayersFromTeam(homeTeamId.ToString());
        List<Player> homeGamePlayers = new List<Player>();


        List<PlayerModel> awayPlayers = new List<PlayerModel>();
        awayPlayers = await playerdb.GetPlayersFromTeam(awayTeamId.ToString());
        List<Player> awayGamePlayers = new List<Player>();

        string homeTeamName = availableTeams.Find(x => x.ID == homeTeamId).TeamName;
        string awayTeamName = availableTeams.Find(x => x.ID == awayTeamId).TeamName;
        t1 = new Team(homeTeamName, homeGamePlayers);
        t2 = new Team(awayTeamName, awayGamePlayers);
        foreach (var player in homePlayers)
        {
            homeGamePlayers.Add(new Player(player.Number, player.FirstName, player.LastName, t1));
        }
        foreach (var player in awayPlayers)
        {
            awayGamePlayers.Add(new Player(player.Number, player.FirstName, player.LastName, t2));
        }

        g = new reftool_blazor_server.Data.Game.Game(t1, t2);
        await InvokeAsync(StateHasChanged);

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITeamData teamdb { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPlayerData playerdb { get; set; }
    }
}
#pragma warning restore 1591
